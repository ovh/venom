// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     Message.avsc
 */

package avro

import (
	"io"

	"github.com/actgardner/gogen-avro/compiler"
	"github.com/actgardner/gogen-avro/container"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/vm/types"
)

type Message struct {
	Headers   []*Header
	Timestamp int64
	Value     []byte
	Key       []byte
	Topic     string
	Partition int32
	Offset    int64
}

func NewMessageWriter(writer io.Writer, codec container.Codec, recordsPerBlock int64) (*container.Writer, error) {
	str := &Message{}
	return container.NewWriter(writer, codec, recordsPerBlock, str.Schema())
}

func DeserializeMessage(r io.Reader) (*Message, error) {
	t := NewMessage()

	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	return t, err
}

func NewMessage() *Message {
	return &Message{}
}

func (r *Message) Schema() string {
	return "{\"fields\":[{\"name\":\"headers\",\"type\":{\"items\":{\"fields\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"Header\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"timestamp\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"topic\",\"type\":\"string\"},{\"name\":\"partition\",\"type\":\"int\"},{\"name\":\"offset\",\"type\":\"long\"}],\"name\":\"Message\",\"namespace\":\"com.example.serializer\",\"type\":\"record\"}"
}

func (r *Message) SchemaName() string {
	return "com.example.serializer.Message"
}

func (r *Message) Serialize(w io.Writer) error {
	return writeMessage(r, w)
}

func (_ *Message) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Message) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Message) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Message) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Message) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Message) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Message) SetString(v string)   { panic("Unsupported operation") }
func (_ *Message) SetUnionElem(v int64) { panic("Unsupported operation") }
func (r *Message) Get(i int) types.Field {
	switch i {
	case 0:
		r.Headers = make([]*Header, 0)
		return (*ArrayHeaderWrapper)(&r.Headers)
	case 1:
		return (*types.Long)(&r.Timestamp)
	case 2:
		return (*types.Bytes)(&r.Value)
	case 3:
		return (*types.Bytes)(&r.Key)
	case 4:
		return (*types.String)(&r.Topic)
	case 5:
		return (*types.Int)(&r.Partition)
	case 6:
		return (*types.Long)(&r.Offset)

	}
	panic("Unknown field index")
}
func (r *Message) SetDefault(i int) {
	switch i {

	}
	panic("Unknown field index")
}
func (_ *Message) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Message) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Message) Finalize()                        {}

type MessageReader struct {
	r io.Reader
	p *vm.Program
}

func NewMessageReader(r io.Reader) (*MessageReader, error) {
	containerReader, err := container.NewReader(r)
	if err != nil {
		return nil, err
	}

	t := NewMessage()
	deser, err := compiler.CompileSchemaBytes([]byte(containerReader.AvroContainerSchema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	return &MessageReader{
		r: containerReader,
		p: deser,
	}, nil
}

func (r *MessageReader) Read() (*Message, error) {
	t := NewMessage()
	err := vm.Eval(r.r, r.p, t)
	return t, err
}
