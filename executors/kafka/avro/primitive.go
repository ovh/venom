// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     Message.avsc
 */

package avro

import (
	"io"

	"github.com/actgardner/gogen-avro/vm/types"
)

type ByteWriter interface {
	Grow(int)
	WriteByte(byte) error
}

type StringWriter interface {
	WriteString(string) (int, error)
}

func encodeInt(w io.Writer, byteCount int, encoded uint64) error {
	var err error
	var bb []byte
	bw, ok := w.(ByteWriter)
	// To avoid reallocations, grow capacity to the largest possible size
	// for this integer
	if ok {
		bw.Grow(byteCount)
	} else {
		bb = make([]byte, 0, byteCount)
	}

	if encoded == 0 {
		if bw != nil {
			err = bw.WriteByte(0)
			if err != nil {
				return err
			}
		} else {
			bb = append(bb, byte(0))
		}
	} else {
		for encoded > 0 {
			b := byte(encoded & 127)
			encoded = encoded >> 7
			if !(encoded == 0) {
				b |= 128
			}
			if bw != nil {
				err = bw.WriteByte(b)
				if err != nil {
					return err
				}
			} else {
				bb = append(bb, b)
			}
		}
	}
	if bw == nil {
		_, err := w.Write(bb)
		return err
	}
	return nil

}

func writeArrayHeader(r []*Header, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeHeader(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeBytes(r []byte, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil {
		return err
	}
	_, err = w.Write(r)
	return err
}

func writeHeader(r *Header, w io.Writer) error {
	var err error
	err = writeBytes(r.Key, w)
	if err != nil {
		return err
	}
	err = writeBytes(r.Value, w)
	if err != nil {
		return err
	}

	return nil
}

func writeInt(r int32, w io.Writer) error {
	downShift := uint32(31)
	encoded := uint64((uint32(r) << 1) ^ uint32(r>>downShift))
	const maxByteSize = 5
	return encodeInt(w, maxByteSize, encoded)
}

func writeMessage(r *Message, w io.Writer) error {
	var err error
	err = writeArrayHeader(r.Headers, w)
	if err != nil {
		return err
	}
	err = writeLong(r.Timestamp, w)
	if err != nil {
		return err
	}
	err = writeBytes(r.Value, w)
	if err != nil {
		return err
	}
	err = writeBytes(r.Key, w)
	if err != nil {
		return err
	}
	err = writeString(r.Topic, w)
	if err != nil {
		return err
	}
	err = writeInt(r.Partition, w)
	if err != nil {
		return err
	}
	err = writeLong(r.Offset, w)
	if err != nil {
		return err
	}

	return nil
}

func writeLong(r int64, w io.Writer) error {
	downShift := uint64(63)
	encoded := uint64((r << 1) ^ (r >> downShift))
	const maxByteSize = 10
	return encodeInt(w, maxByteSize, encoded)
}

func writeString(r string, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil {
		return err
	}
	if sw, ok := w.(StringWriter); ok {
		_, err = sw.WriteString(r)
	} else {
		_, err = w.Write([]byte(r))
	}
	return err
}

type ArrayHeaderWrapper []*Header

func (_ *ArrayHeaderWrapper) SetBoolean(v bool)                { panic("Unsupported operation") }
func (_ *ArrayHeaderWrapper) SetInt(v int32)                   { panic("Unsupported operation") }
func (_ *ArrayHeaderWrapper) SetLong(v int64)                  { panic("Unsupported operation") }
func (_ *ArrayHeaderWrapper) SetFloat(v float32)               { panic("Unsupported operation") }
func (_ *ArrayHeaderWrapper) SetDouble(v float64)              { panic("Unsupported operation") }
func (_ *ArrayHeaderWrapper) SetBytes(v []byte)                { panic("Unsupported operation") }
func (_ *ArrayHeaderWrapper) SetString(v string)               { panic("Unsupported operation") }
func (_ *ArrayHeaderWrapper) SetUnionElem(v int64)             { panic("Unsupported operation") }
func (_ *ArrayHeaderWrapper) Get(i int) types.Field            { panic("Unsupported operation") }
func (_ *ArrayHeaderWrapper) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *ArrayHeaderWrapper) Finalize()                        {}
func (_ *ArrayHeaderWrapper) SetDefault(i int)                 { panic("Unsupported operation") }
func (r *ArrayHeaderWrapper) AppendArray() types.Field {
	var v *Header
	v = NewHeader()

	*r = append(*r, v)
	return (*r)[len(*r)-1]
}
