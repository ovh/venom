// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     KafkaMessage.avsc
 */

package avro

import (
	"github.com/actgardner/gogen-avro/compiler"
	"github.com/actgardner/gogen-avro/container"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/vm/types"
	"io"
)

type Header struct {
	Key   []byte
	Value []byte
}

func NewHeaderWriter(writer io.Writer, codec container.Codec, recordsPerBlock int64) (*container.Writer, error) {
	str := &Header{}
	return container.NewWriter(writer, codec, recordsPerBlock, str.Schema())
}

func DeserializeHeader(r io.Reader) (*Header, error) {
	t := NewHeader()

	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	return t, err
}

func NewHeader() *Header {
	return &Header{}
}

func (r *Header) Schema() string {
	return "{\"fields\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"Header\",\"type\":\"record\"}"
}

func (r *Header) SchemaName() string {
	return "io.ninety.kafka.s3.serializer.Header"
}

func (r *Header) Serialize(w io.Writer) error {
	return writeHeader(r, w)
}

func (_ *Header) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Header) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Header) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Header) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Header) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Header) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Header) SetString(v string)   { panic("Unsupported operation") }
func (_ *Header) SetUnionElem(v int64) { panic("Unsupported operation") }
func (r *Header) Get(i int) types.Field {
	switch i {
	case 0:
		return (*types.Bytes)(&r.Key)
	case 1:
		return (*types.Bytes)(&r.Value)

	}
	panic("Unknown field index")
}
func (r *Header) SetDefault(i int) {
	switch i {

	}
	panic("Unknown field index")
}
func (_ *Header) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Header) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Header) Finalize()                        {}

type HeaderReader struct {
	r io.Reader
	p *vm.Program
}

func NewHeaderReader(r io.Reader) (*HeaderReader, error) {
	containerReader, err := container.NewReader(r)
	if err != nil {
		return nil, err
	}

	t := NewHeader()
	deser, err := compiler.CompileSchemaBytes([]byte(containerReader.AvroContainerSchema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	return &HeaderReader{
		r: containerReader,
		p: deser,
	}, nil
}

func (r *HeaderReader) Read() (*Header, error) {
	t := NewHeader()
	err := vm.Eval(r.r, r.p, t)
	return t, err
}
