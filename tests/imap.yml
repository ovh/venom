name: IMAP testsuite
vars:
  imapHost: gw2sdev-docker.ovh.net
  imapPort: 12422
  imapUser: imap@venom.com
  imapPassword: imapvenompassword
testcases:
  - name: Clear a mailbox
    steps:
      - type: imap
        auth:
          withtls: false
          host: "{{.imapHost}}"
          port: "{{.imapPort}}"
          user: "{{.imapUser}}"
          password: "{{.imapPassword}}"
        commands:
          - name: clear
            args:
              mailboxes:
                - INBOX
        assertions:
          # As multiple commands can be executed in a single testcase, we need to specify which command result we want to assert
          - result.commands.commands0.err ShouldBeEmpty

  - name: Clear all mailboxes
    steps:
      - type: imap
        auth:
          withtls: false
          host: "{{.imapHost}}"
          port: "{{.imapPort}}"
          user: "{{.imapUser}}"
          password: "{{.imapPassword}}"
        commands:
          - name: clear
            args:
              mailboxes:
                - "*"
        assertions:
          - result.commands.commands0.err ShouldBeEmpty

  - name: Create mailbox and append message in new mailbox
    steps:
      - type: imap
        auth:
          withtls: false
          host: "{{.imapHost}}"
          port: "{{.imapPort}}"
          user: "{{.imapUser}}"
          password: "{{.imapPassword}}"
        commands:
          - name: create
            args:
              mailbox: testBox
          - name: append
            args:
              mailbox: testBox
              from: test@venom.ovh
              to: test@venom.ovh
              subject: Test
              body: This is a test
              flags:
                - Flag1
                - Flag2
        assertions:
          - result.commands.commands1.err ShouldBeEmpty
          - result.commands.commands1.mail.from ShouldEqual test@venom.ovh
          - result.commands.commands1.mail.to ShouldEqual test@venom.ovh
          - result.commands.commands1.mail.subject ShouldEqual Test
          - result.commands.commands1.mail.body ShouldEqual This is a test
          - result.commands.commands1.mail.flags.flags0 ShouldEqual Flag1
          - result.commands.commands1.mail.flags.flags1 ShouldEqual Flag2

  - name: Only fetch mail
    steps:
      - type: imap
        auth:
          withtls: false
          host: "{{.imapHost}}"
          port: "{{.imapPort}}"
          user: "{{.imapUser}}"
          password: "{{.imapPassword}}"
        commands:
          - name: fetch
            search:
              mailbox: testBox
              from: test@venom.ovh
              to: .*
              subject: .*
              body: .*
        assertions:
          - result.commands.commands0.err ShouldBeEmpty
          - result.commands.commands0.search.from ShouldEqual test@venom.ovh
          - result.commands.commands0.search.to ShouldEqual test@venom.ovh
          - result.commands.commands0.search.subject ShouldEqual Test
          - result.commands.commands0.search.body ShouldEqual This is a test
          - result.commands.commands0.search.flags.flags0 ShouldEqual Flag1

  - name: Move mail and add then remove flags
    steps:
      - type: imap
        auth:
          withtls: false
          host: "{{.imapHost}}"
          port: "{{.imapPort}}"
          user: "{{.imapUser}}"
          password: "{{.imapPassword}}"
        commands:
          - name: move
            search:
              mailbox: testBox
              from: test@venom.ovh
              to: test@venom.ovh
              subject: Test
              body: This is a test
            args:
              mailbox: INBOX
          - name: flag
            search:
              mailbox: INBOX
              from: test@venom.ovh
              to: test@venom.ovh
              subject: Test
              body: This is a test
            args:
              add:
                - "\\Flagged"
              remove:
                - "\\Flagged"
                - "\\Seen"
        assertions:
          # MOVE command
          - result.commands.commands0.err ShouldBeEmpty
          # State of the mail before command execution (search)
          - result.commands.commands0.search.from ShouldEqual "test@venom.ovh"
          # Mail as a result of command execution
          - result.commands.commands0.mail.from ShouldEqual "test@venom.ovh"
          # FLAG command
          - result.commands.commands1.err ShouldBeEmpty
          - result.commands.commands1.search.from ShouldEqual "test@venom.ovh"
          - result.commands.commands1.mail.from ShouldEqual "test@venom.ovh"
          - result.commands.commands1.mail.flags.flags0 ShouldEqual Flag1
          - result.commands.commands1.mail.flags.flags1 ShouldEqual Flag2
          # Commands that modify mails do a FETCH right after to make sure the command succeeded.
          # Doing so implicitly adds the "\Seen" flag to the mail
          - result.commands.commands1.mail.flags.flags2 ShouldEqual \Seen

  - name: Set flags and delete mail
    steps:
      - type: imap
        auth:
          withtls: false
          host: "{{.imapHost}}"
          port: "{{.imapPort}}"
          user: "{{.imapUser}}"
          password: "{{.imapPassword}}"
        commands:
          - name: flag
            search:
              mailbox: INBOX
              from: test@venom.ovh
              to: test@venom.ovh
              subject: Test
              body: This is a test
            args:
              set:
                - Flag1
                - Flag2
          - name: delete
            search:
              mailbox: INBOX
              from: test@venom.ovh
              to: test@venom.ovh
              subject: Test
              body: This is a test
        assertions:
          # FLAG command
          - result.commands.commands0.err ShouldBeEmpty
          - result.commands.commands0.search.from ShouldEqual "test@venom.ovh"
          - result.commands.commands0.mail.from ShouldEqual "test@venom.ovh"
          - result.commands.commands0.mail.flags.flags0 ShouldEqual Flag1
          - result.commands.commands0.mail.flags.flags1 ShouldEqual Flag2
          - result.commands.commands0.mail.flags.flags2 ShouldEqual \Seen
          # DELETE command
          - result.commands.commands1.err ShouldBeEmpty
          # DELETE command has no relevant assertion. The command itself already checks if searched mail has been deleted.
          # The only assertion we can make is to make sure we searched the right mail initially
          - result.commands.commands1.search.from ShouldEqual "test@venom.ovh"
