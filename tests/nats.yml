name: NATS testsuite
vars:
  url: 'nats://localhost:4222'
  baseSubject: "nats.test"
  message: '{"message": "hello world"}'
  certificatePath: "./nats/pki/client.crt"
  keyPath: "./nats/pki/client.key"
  caPath: "./nats/pki/ca.crt"
  natsTlsConfig: "--tlscert {{.certificatePath}} --tlskey {{.keyPath}} --tlsca {{.caPath}}"

testcases:

  - name: NATS publish testcase
    steps:
      - type: nats
        url: "{{.url}}"
        tls:
          selfSigned: true
          serverVerify: true
          certificatePath: "{{.certificatePath}}"
          keyPath: "{{.keyPath}}"
          caPath: "{{.caPath}}"
        command: publish
        subject: "{{.baseSubject}}.publish"
        payload: '{{.message}}'
        headers:
          timestamp:
            - "{{.venom.timestamp}}"
        assertions:
          - result.error ShouldBeEmpty
  
  - name: NATS publish empty subject testcase
    steps:
      - type: nats
        url: "{{.url}}"
        tls:
          selfSigned: true
          serverVerify: true
          certificatePath: "{{.certificatePath}}"
          keyPath: "{{.keyPath}}"
          caPath: "{{.caPath}}"
        command: publish
        subject: ""
        payload: '{{.message}}'
        headers:
          timestamp:
            - "{{.venom.timestamp}}"
        assertions:
          - result.error ShouldNotBeEmpty

  - name: NATS publish Jetstream testcase
    steps:
      - type: exec
        script: |
          nats {{.natsTlsConfig}} stream create TEST --subjects "{{.baseSubject}}.js.>" --defaults

      - type: nats
        command: publish
        tls:
          selfSigned: true
          serverVerify: true
          certificatePath: "{{.certificatePath}}"
          keyPath: "{{.keyPath}}"
          caPath: "{{.caPath}}"
        subject: "{{.baseSubject}}.js.hello"
        deadline: 2
        jetstream:
          enabled: true
        assertions:
          - result.error ShouldBeEmpty

      - type: exec
        script: |
          nats {{.natsTlsConfig}} stream rm TEST -f

  - name: NATS publish Jetstream non-stream subject testcase
    steps:
      - type: exec
        script: |
          nats {{.natsTlsConfig}} stream create TEST --subjects "{{.baseSubject}}.js.>" --defaults

      - type: nats
        command: publish
        tls:
          selfSigned: true
          serverVerify: true
          certificatePath: "{{.certificatePath}}"
          keyPath: "{{.keyPath}}"
          caPath: "{{.caPath}}"
        subject: "some.other.subject"
        deadline: 2
        jetstream:
          enabled: true
        assertions:
          - result.error ShouldNotBeEmpty

      - type: exec
        script: |
          nats {{.natsTlsConfig}} stream rm TEST -f

  - name: NATS publish Jetstream empty subject testcase
    steps:
      - type: exec
        script: |
          nats {{.natsTlsConfig}} stream create TEST --subjects "{{.baseSubject}}.js.>" --defaults

      - type: nats
        command: publish
        tls:
          selfSigned: true
          serverVerify: true
          certificatePath: "{{.certificatePath}}"
          keyPath: "{{.keyPath}}"
          caPath: "{{.caPath}}"
        subject: ""
        deadline: 2
        jetstream:
          enabled: true
        assertions:
          - result.error ShouldNotBeEmpty

      - type: exec
        script: |
          nats {{.natsTlsConfig}} stream rm TEST -f

  - name: NATS subscribe Jetstream consumer testcase
    steps:
    - type: exec
      script: |
        nats {{.natsTlsConfig}} stream create TEST --subjects "{{.baseSubject}}.js.>" --defaults
   
    - type: exec
      script: |
        nats {{.natsTlsConfig}} pub "{{.baseSubject}}.js.hello" '{{.message}}'
        nats {{.natsTlsConfig}} pub --count 3 "{{.baseSubject}}.js.world" '{{.message}}'
    
    - type: nats
      command: subscribe
      tls:
          selfSigned: true
          serverVerify: true
          certificatePath: "{{.certificatePath}}"
          keyPath: "{{.keyPath}}"
          caPath: "{{.caPath}}"
      subject: "{{.baseSubject}}.>"
      messageLimit: 2
      deadline: 10
      jetstream:
        enabled: true
        stream: TEST
        filterSubjects:
          - "{{.baseSubject}}.js.hello"
          - "{{.baseSubject}}.js.world"
      assertions:
        - result.error ShouldBeEmpty
        - result.messages.__Len__ ShouldEqual 2
        - result.messages.messages0.datajson ShouldContainKey message
        - result.messages.messages0.datajson.message ShouldEqual "hello world"

    - type: exec
      script: |
        nats {{.natsTlsConfig}} stream rm TEST -f

  - name: NATS subscribe Jetstream consumer testcase with deadline
    steps:
    - type: exec
      script: |
        nats {{.natsTlsConfig}} stream create TEST --subjects "{{.baseSubject}}.js.>" --defaults
   
    - type: exec
      script: |
        nats {{.natsTlsConfig}} pub "{{.baseSubject}}.js.hello" '{{.message}}'
        nats {{.natsTlsConfig}} pub --count 1 "{{.baseSubject}}.js.world" '{{.message}}'
    
    - type: nats
      command: subscribe
      tls:
          selfSigned: true
          serverVerify: true
          certificatePath: "{{.certificatePath}}"
          keyPath: "{{.keyPath}}"
          caPath: "{{.caPath}}"
      subject: "{{.baseSubject}}.>"
      messageLimit: 10
      deadline: 1
      jetstream:
        enabled: true
        stream: TEST
        filterSubjects:
          - "{{.baseSubject}}.js.hello"
          - "{{.baseSubject}}.js.world"
      assertions:
        - result.error ShouldNotBeEmpty

    - type: exec
      script: |
        nats {{.natsTlsConfig}} stream rm TEST -f

  - name: NATS subscribe testcase
    steps:
      - type: nats
        url: "{{.url}}"
        command: subscribe
        tls:
          selfSigned: true
          serverVerify: true
          certificatePath: "{{.certificatePath}}"
          keyPath: "{{.keyPath}}"
          caPath: "{{.caPath}}"
        subject: "{{.baseSubject}}.>"
        messageLimit: 1
        deadline: 1
        assertions:
          - result.error ShouldBeEmpty
          - result.messages.__Len__ ShouldEqual 1
          - result.messages.messages0.datajson ShouldContainKey message
          - result.messages.messages0.datajson.message ShouldEqual "hello world"

  - name: NATS subscribe testcase with deadline
    steps:
      - type: nats
        url: "{{.url}}"
        command: subscribe
        tls:
          selfSigned: true
          serverVerify: true
          certificatePath: "{{.certificatePath}}"
          keyPath: "{{.keyPath}}"
          caPath: "{{.caPath}}"
        subject: "{{.baseSubject}}.>"
        messageLimit: 1000
        deadline: 1
        assertions:
          - result.error ShouldNotBeEmpty
          - result.error ShouldContainSubstring "timeout reached"

  - name: NATS request/reply testcase
    steps:
      - type: nats
        url: "{{.url}}"
        command: publish
        tls:
          selfSigned: true
          serverVerify: true
          certificatePath: "{{.certificatePath}}"
          keyPath: "{{.keyPath}}"
          caPath: "{{.caPath}}"
        request: true
        subject: "{{.baseSubject}}.request"
        replySubject: "{{.baseSubject}}.reply"
        payload: '{{.message}}'
        assertions:
          - result.error ShouldBeEmpty
          - result.messages.__Len__ ShouldEqual 1
          - result.messages.messages0.datajson ShouldContainKey message
          - result.messages.messages0.datajson.message ShouldEqual "hello world"