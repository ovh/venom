name: Range testsuite
vars:
  rangedata:
    - actual: foo
      expected: foo
      index: 0
    - actual: bar
      expected: bar
      index: 1
testcases:

- name: range context is not enabled when "range" attribute is not present
  steps:
  - type: exec
    script: echo {{.range}}
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldEqual false

- name: range with harcoded array
  steps:
  - type: exec
    range:
      - actual: hello
        expected: hello
        index: 0
      - actual: world
        expected: world
        index: 1
    script: echo "{{.range}} {{.index}} {{.value.actual}}"
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldEqual "true {{.value.index}} {{.value.expected}}"

- name: range with harcoded string map
  steps:
  - type: exec
    range:
      foo: 
        actual: hello
        expected: hello
        key: foo
      bar: 
        actual: world
        expected: world
        key: bar
    script: echo "{{.range}} {{.key}} {{.value.actual}}"
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldEqual "true {{.value.key}} {{.value.expected}}"

- name: range with harcoded iterations
  steps:
  - type: exec
    range: 5
    script: echo "{{.range}} {{.index}}"
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldEqual "true {{.value}}"

- name: range with templated items from current context or vars files
  steps:
  - type: exec
    range: '{{.rangedata}}'
    script: echo "{{.range}} {{.index}} {{.value.actual}}"
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldEqual "true {{.value.index}} {{.value.expected}}"

- name: rangeInterpolatedSetup
  steps:
  - type: exec
    script: echo '[{"actual":"hi", "expected":"hi", "index":0}, {"actual":"hey", "expected":"hey", "index":1}]'
    vars:
      result:
        from: result.systemout

- name: range with templated items from a previous test case
  steps:
  - type: exec
    range: '{{.rangeInterpolatedSetup.result}}'
    script: echo "{{.range}} {{.index}} {{.value.actual}}"
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldEqual "true {{.value.index}} {{.value.expected}}"
