// Code generated by protoc-gen-go. DO NOT EDIT.
// source: desc_test_comments.proto

package testprotos // import "github.com/jhump/protoreflect/internal/testprotos"

/*
And now the package declaration
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request_MarioCharacters int32

const (
	Request_MARIO     Request_MarioCharacters = 1
	Request_LUIGI     Request_MarioCharacters = 2
	Request_PEACH     Request_MarioCharacters = 3
	Request_BOWSER    Request_MarioCharacters = 4
	Request_WARIO     Request_MarioCharacters = 5
	Request_WALUIGI   Request_MarioCharacters = 6
	Request_SHY_GUY   Request_MarioCharacters = 7
	Request_HEY_HO    Request_MarioCharacters = 7
	Request_MAGIKOOPA Request_MarioCharacters = 8
	Request_KAMEK     Request_MarioCharacters = 8
	Request_SNIFIT    Request_MarioCharacters = -101
)

var Request_MarioCharacters_name = map[int32]string{
	1: "MARIO",
	2: "LUIGI",
	3: "PEACH",
	4: "BOWSER",
	5: "WARIO",
	6: "WALUIGI",
	7: "SHY_GUY",
	// Duplicate value: 7: "HEY_HO",
	8: "MAGIKOOPA",
	// Duplicate value: 8: "KAMEK",
	-101: "SNIFIT",
}
var Request_MarioCharacters_value = map[string]int32{
	"MARIO":     1,
	"LUIGI":     2,
	"PEACH":     3,
	"BOWSER":    4,
	"WARIO":     5,
	"WALUIGI":   6,
	"SHY_GUY":   7,
	"HEY_HO":    7,
	"MAGIKOOPA": 8,
	"KAMEK":     8,
	"SNIFIT":    -101,
}

func (x Request_MarioCharacters) Enum() *Request_MarioCharacters {
	p := new(Request_MarioCharacters)
	*p = x
	return p
}
func (x Request_MarioCharacters) String() string {
	return proto.EnumName(Request_MarioCharacters_name, int32(x))
}
func (x *Request_MarioCharacters) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Request_MarioCharacters_value, data, "Request_MarioCharacters")
	if err != nil {
		return err
	}
	*x = Request_MarioCharacters(value)
	return nil
}
func (Request_MarioCharacters) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_desc_test_comments_055e0dc63d6a9e0b, []int{0, 0}
}

// We need a request for our RPC service below.
//
// Deprecated: Do not use.
type Request struct {
	// A field comment
	Ids []int32 `protobuf:"varint,1,rep,packed,name=ids,json=|foo|" json:"ids,omitempty"`
	// label comment
	Name                         *string         `protobuf:"bytes,2,opt,name=name,def=fubar" json:"name,omitempty"`
	Extras                       *Request_Extras `protobuf:"group,3,opt,name=Extras,json=extras" json:"extras,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}        `json:"-"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
	XXX_sizecache                int32  `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_desc_test_comments_055e0dc63d6a9e0b, []int{0}
}

var extRange_Request = []proto.ExtensionRange{
	{Start: 100, End: 200},
	{Start: 201, End: 250},
}

func (*Request) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_Request
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

const Default_Request_Name string = "fubar"

func (m *Request) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *Request) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return Default_Request_Name
}

func (m *Request) GetExtras() *Request_Extras {
	if m != nil {
		return m.Extras
	}
	return nil
}

// Group comment
type Request_Extras struct {
	Dbl *float64 `protobuf:"fixed64,1,opt,name=dbl" json:"dbl,omitempty"`
	Flt *float32 `protobuf:"fixed32,2,opt,name=flt" json:"flt,omitempty"`
	// Leading comment...
	Str                  *string  `protobuf:"bytes,3,opt,name=str" json:"str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request_Extras) Reset()         { *m = Request_Extras{} }
func (m *Request_Extras) String() string { return proto.CompactTextString(m) }
func (*Request_Extras) ProtoMessage()    {}
func (*Request_Extras) Descriptor() ([]byte, []int) {
	return fileDescriptor_desc_test_comments_055e0dc63d6a9e0b, []int{0, 0}
}
func (m *Request_Extras) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request_Extras.Unmarshal(m, b)
}
func (m *Request_Extras) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request_Extras.Marshal(b, m, deterministic)
}
func (dst *Request_Extras) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request_Extras.Merge(dst, src)
}
func (m *Request_Extras) XXX_Size() int {
	return xxx_messageInfo_Request_Extras.Size(m)
}
func (m *Request_Extras) XXX_DiscardUnknown() {
	xxx_messageInfo_Request_Extras.DiscardUnknown(m)
}

var xxx_messageInfo_Request_Extras proto.InternalMessageInfo

func (m *Request_Extras) GetDbl() float64 {
	if m != nil && m.Dbl != nil {
		return *m.Dbl
	}
	return 0
}

func (m *Request_Extras) GetFlt() float32 {
	if m != nil && m.Flt != nil {
		return *m.Flt
	}
	return 0
}

func (m *Request_Extras) GetStr() string {
	if m != nil && m.Str != nil {
		return *m.Str
	}
	return ""
}

var E_Guid1 = &proto.ExtensionDesc{
	ExtendedType:  (*Request)(nil),
	ExtensionType: (*uint64)(nil),
	Field:         123,
	Name:          "foo.bar.guid1",
	Tag:           "varint,123,opt,name=guid1",
	Filename:      "desc_test_comments.proto",
}

var E_Guid2 = &proto.ExtensionDesc{
	ExtendedType:  (*Request)(nil),
	ExtensionType: (*uint64)(nil),
	Field:         124,
	Name:          "foo.bar.guid2",
	Tag:           "varint,124,opt,name=guid2",
	Filename:      "desc_test_comments.proto",
}

func init() {
	proto.RegisterType((*Request)(nil), "foo.bar.Request")
	proto.RegisterType((*Request_Extras)(nil), "foo.bar.Request.Extras")
	proto.RegisterEnum("foo.bar.Request_MarioCharacters", Request_MarioCharacters_name, Request_MarioCharacters_value)
	proto.RegisterExtension(E_Guid1)
	proto.RegisterExtension(E_Guid2)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcServiceClient is the client API for RpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcServiceClient interface {
	// Method comment
	StreamingRpc(ctx context.Context, opts ...grpc.CallOption) (RpcService_StreamingRpcClient, error)
	UnaryRpc(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
}

type rpcServiceClient struct {
	cc *grpc.ClientConn
}

func NewRpcServiceClient(cc *grpc.ClientConn) RpcServiceClient {
	return &rpcServiceClient{cc}
}

func (c *rpcServiceClient) StreamingRpc(ctx context.Context, opts ...grpc.CallOption) (RpcService_StreamingRpcClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RpcService_serviceDesc.Streams[0], "/foo.bar.RpcService/StreamingRpc", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcServiceStreamingRpcClient{stream}
	return x, nil
}

type RpcService_StreamingRpcClient interface {
	Send(*Request) error
	CloseAndRecv() (*Request, error)
	grpc.ClientStream
}

type rpcServiceStreamingRpcClient struct {
	grpc.ClientStream
}

func (x *rpcServiceStreamingRpcClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcServiceStreamingRpcClient) CloseAndRecv() (*Request, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Request)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *rpcServiceClient) UnaryRpc(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/foo.bar.RpcService/UnaryRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcServiceServer is the server API for RpcService service.
type RpcServiceServer interface {
	// Method comment
	StreamingRpc(RpcService_StreamingRpcServer) error
	UnaryRpc(context.Context, *Request) (*empty.Empty, error)
}

func RegisterRpcServiceServer(s *grpc.Server, srv RpcServiceServer) {
	s.RegisterService(&_RpcService_serviceDesc, srv)
}

func _RpcService_StreamingRpc_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServiceServer).StreamingRpc(&rpcServiceStreamingRpcServer{stream})
}

type RpcService_StreamingRpcServer interface {
	SendAndClose(*Request) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type rpcServiceStreamingRpcServer struct {
	grpc.ServerStream
}

func (x *rpcServiceStreamingRpcServer) SendAndClose(m *Request) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcServiceStreamingRpcServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RpcService_UnaryRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServiceServer).UnaryRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foo.bar.RpcService/UnaryRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServiceServer).UnaryRpc(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "foo.bar.RpcService",
	HandlerType: (*RpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryRpc",
			Handler:    _RpcService_UnaryRpc_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRpc",
			Handler:       _RpcService_StreamingRpc_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "desc_test_comments.proto",
}

func init() {
	proto.RegisterFile("desc_test_comments.proto", fileDescriptor_desc_test_comments_055e0dc63d6a9e0b)
}

var fileDescriptor_desc_test_comments_055e0dc63d6a9e0b = []byte{
	// 655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0xf6, 0xd9, 0x71, 0xae, 0x20, 0x4e, 0x87, 0xda, 0x1a, 0x57, 0xaa, 0x42, 0x85,
	0x20, 0xea, 0xe0, 0xa8, 0x29, 0x53, 0x27, 0xd2, 0x2a, 0x6d, 0xd2, 0x10, 0x52, 0x5d, 0xa8, 0xaa,
	0x32, 0x10, 0xd9, 0xce, 0x25, 0x35, 0x4a, 0x72, 0xc6, 0xbe, 0x40, 0x7f, 0x2d, 0x6c, 0xfd, 0x0b,
	0x58, 0x18, 0x58, 0x90, 0xa8, 0x2a, 0x21, 0x95, 0x6e, 0x2c, 0x88, 0x91, 0xfe, 0x03, 0x6c, 0xac,
	0xfc, 0x03, 0x0c, 0x37, 0x30, 0x80, 0x6c, 0xa7, 0xaa, 0x44, 0x7b, 0xd3, 0xd3, 0xe7, 0x7d, 0xdf,
	0xf7, 0xd9, 0x77, 0xef, 0x21, 0xb3, 0xc3, 0x22, 0xaf, 0x2d, 0x58, 0x24, 0xda, 0x1e, 0x1f, 0x0c,
	0xd8, 0x50, 0x44, 0x76, 0x10, 0x72, 0xc1, 0x49, 0xb6, 0xcb, 0xb9, 0xed, 0x3a, 0xa1, 0x35, 0xd3,
	0xe3, 0xbc, 0xd7, 0x67, 0xc5, 0x04, 0xbb, 0xa3, 0x6e, 0x91, 0x0d, 0x02, 0xb1, 0x97, 0xaa, 0xac,
	0xe9, 0xcb, 0x7a, 0x1e, 0x08, 0x9f, 0x0f, 0xc7, 0xe5, 0x73, 0xbf, 0x54, 0x94, 0xa5, 0xec, 0xe5,
	0x88, 0x45, 0x82, 0xdc, 0x43, 0xaa, 0xdf, 0x89, 0x4c, 0x90, 0x57, 0x0b, 0xda, 0x32, 0x3e, 0x91,
	0x50, 0x75, 0x5c, 0xef, 0x4c, 0x42, 0x75, 0x77, 0x6f, 0x1f, 0x03, 0xaa, 0x1d, 0x76, 0x39, 0x3f,
	0x24, 0x77, 0x10, 0x1c, 0x3a, 0x03, 0x66, 0x2a, 0x79, 0x50, 0xc8, 0x2d, 0x69, 0xdd, 0x91, 0xeb,
	0x84, 0x34, 0x41, 0xa4, 0x88, 0x74, 0xb6, 0x2b, 0x42, 0x27, 0x32, 0xd5, 0x3c, 0x28, 0xa0, 0xd2,
	0xb4, 0x3d, 0xfe, 0x38, 0x7b, 0xdc, 0xc2, 0xae, 0x24, 0x69, 0x3a, 0x96, 0x59, 0xab, 0x48, 0x4f,
	0x09, 0xc1, 0x48, 0xed, 0xb8, 0x7d, 0x13, 0xe4, 0x41, 0x01, 0xd0, 0x38, 0x8c, 0x49, 0xb7, 0x2f,
	0x92, 0x36, 0x0a, 0x8d, 0xc3, 0x98, 0x44, 0x22, 0x4c, 0xbc, 0x73, 0x34, 0x0e, 0x97, 0xf4, 0x63,
	0x09, 0x33, 0x38, 0x33, 0xf7, 0x03, 0xa0, 0x5b, 0x0d, 0x27, 0xf4, 0xf9, 0xca, 0x8e, 0x13, 0x3a,
	0x9e, 0x60, 0x61, 0x44, 0x26, 0x91, 0xd6, 0x28, 0xd3, 0x5a, 0x13, 0x03, 0x0b, 0x1d, 0x4b, 0xf8,
	0x56, 0x39, 0x95, 0xf0, 0x37, 0x24, 0x33, 0x48, 0x7b, 0xbc, 0x59, 0x5b, 0xab, 0x61, 0xc5, 0xc2,
	0xdf, 0x24, 0xfc, 0x0e, 0xce, 0x25, 0xec, 0x64, 0xd2, 0x43, 0x72, 0x48, 0xdb, 0xa8, 0x94, 0x57,
	0xaa, 0x58, 0x25, 0x08, 0xe9, 0xcb, 0xcd, 0xad, 0x56, 0x85, 0x62, 0x18, 0xe3, 0xad, 0xc4, 0x4a,
	0x23, 0x13, 0x28, 0xbb, 0x55, 0x4e, 0x0d, 0x74, 0x62, 0xa2, 0x6c, 0xab, 0xba, 0xdd, 0x5e, 0xdb,
	0xdc, 0xc6, 0x59, 0x6b, 0xe2, 0x8b, 0x84, 0xa3, 0x07, 0x63, 0x23, 0x84, 0xf4, 0x6a, 0x65, 0xbb,
	0x5d, 0x6d, 0xe2, 0x2c, 0xb9, 0x89, 0x72, 0x8d, 0xf2, 0x5a, 0xad, 0xde, 0x6c, 0x6e, 0x94, 0xb1,
	0x11, 0x9b, 0xd5, 0xcb, 0x8d, 0x4a, 0x1d, 0x1b, 0xe4, 0x36, 0xd2, 0x5b, 0x4f, 0x6a, 0xab, 0xb5,
	0xa7, 0xf8, 0xdd, 0xdf, 0xf1, 0x01, 0xd6, 0xc4, 0xb1, 0x84, 0x07, 0xa7, 0x12, 0xbe, 0xd1, 0x30,
	0x98, 0xd7, 0x8c, 0x0e, 0x3e, 0x07, 0xf3, 0xb3, 0xc6, 0x39, 0xc0, 0x7f, 0x80, 0x35, 0x75, 0x22,
	0xa1, 0x1e, 0x05, 0x7d, 0x47, 0xdc, 0x3d, 0x93, 0xd0, 0xc8, 0x00, 0x45, 0x85, 0x9a, 0x9e, 0x4d,
	0xee, 0x01, 0x98, 0x60, 0x1d, 0x1a, 0x08, 0x4f, 0xae, 0x43, 0x63, 0x16, 0x2f, 0x52, 0xb5, 0xcb,
	0x39, 0x55, 0xe3, 0xc7, 0x51, 0x5d, 0x67, 0xbf, 0xf4, 0x11, 0x20, 0x44, 0x03, 0xaf, 0xc5, 0xc2,
	0x57, 0xbe, 0xc7, 0xc8, 0x43, 0x74, 0xa3, 0x25, 0x42, 0xe6, 0x0c, 0xfc, 0x61, 0x8f, 0x06, 0x1e,
	0xc1, 0xff, 0x3f, 0x95, 0x75, 0x85, 0x14, 0x00, 0xa9, 0x23, 0x63, 0x73, 0xe8, 0x84, 0x7b, 0xd7,
	0x57, 0x4c, 0xd9, 0xe9, 0x08, 0xda, 0x17, 0x23, 0x68, 0x57, 0xe2, 0x11, 0x9c, 0x9b, 0xfc, 0x24,
	0xe1, 0x87, 0xa0, 0x52, 0xfe, 0x2c, 0xe1, 0xeb, 0xaf, 0xef, 0xad, 0xe2, 0xcf, 0xe7, 0x8f, 0x8e,
	0x94, 0xf4, 0x67, 0x14, 0xa3, 0x73, 0x22, 0xa1, 0x46, 0x54, 0x97, 0xbb, 0xa7, 0x12, 0x82, 0x23,
	0x25, 0xb3, 0x74, 0x1f, 0x69, 0xbd, 0x91, 0xdf, 0x59, 0xb8, 0xda, 0xc1, 0x3c, 0xc8, 0x83, 0x02,
	0xa4, 0x69, 0xfa, 0x42, 0x57, 0xba, 0x46, 0x77, 0x78, 0xa9, 0x2b, 0x2d, 0x2f, 0x3e, 0x5b, 0xe8,
	0xf9, 0x62, 0x67, 0xe4, 0xda, 0x1e, 0x1f, 0x14, 0x5f, 0xec, 0x8c, 0x06, 0x41, 0xba, 0x24, 0x21,
	0xeb, 0xf6, 0x99, 0x27, 0x8a, 0xfe, 0x50, 0xb0, 0x70, 0xe8, 0xf4, 0x8b, 0xf1, 0x7e, 0x24, 0x99,
	0xe8, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x13, 0x35, 0x7f, 0x71, 0x03, 0x00, 0x00,
}
